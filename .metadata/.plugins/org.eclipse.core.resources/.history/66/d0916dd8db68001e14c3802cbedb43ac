package Lab2;

import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;

public class UniformCostSearchAlgo implements ISearchAlgo{

	@Override
	public Node execute(Node root, String goal) {
		Set<Node> explored = new HashSet<>();
		PriorityQueue<Node> frontier =  new PriorityQueue<>(new NodeComparator());

		frontier.add(root);
		while (!frontier.isEmpty()) {
			Node node = frontier.poll();
			if (node.getLabel().equals(goal)) {
				return node;
			} else
				explored.add(node);
			List<Edge> children = node.getChildren();
			for (Edge child : children) {
				Node end= child.getEnd();
				if(!frontier.contains(end) ||!explored.contains(end)) {
					frontier.add(end);
					
				}
				else if(end.getPathCost() > new PathCode()) {
					
				}
			}
		}
		
		
		return null;
	}

	@Override
	public Node execute(Node root, String start, String goal) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Node executeTreeSearch(Node root, String goal) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Node executeTreeSearch(Node root, String start, String goal) {
		// TODO Auto-generated method stub
		return null;
	}

}
