package Lab2_1;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;


public class Node {
	private String state;
	private List<Node> parents;
	private List<Node> neighbours;
	private boolean visited;
	
	public Node() {
		super();
	}
	public Node(String state) {
		super();
		this.state = state;
	}
	public String getState() {
		return state;
	}
	public void setState(String state) {
		this.state = state;
	}
	public List<Node> getParents() {
		return parents;
	}
	public void setParents(List<Node> parents) {
		this.parents = parents;
	}
	public List<Node> getNeighbours() {
		return neighbours;
	}
	public void setNeighbours(List<Node> neighbours) {
		this.neighbours = neighbours;
	}
	public boolean isVisited() {
		return visited;
	}
	public void setVisited(boolean visited) {
		this.visited = visited;
	}
	public Node execute(Node root, String goal) {
		Queue<Node> frontier  = new LinkedList<>();
//        Map<Node, Node> parents = new HashMap<>();
		frontier.add(root);
		while (!frontier.isEmpty()) {
			Node node = frontier.poll();
			if(node.state.equals(goal)) {
				return node;
			}
			node.setVisited(true);
			  for (Node child: node.neighbours) {
	                if (!child.isVisited()) {
	                    frontier.add(child);
//	                    parents.put(child, node);
	                }
	            }
		}
		return null;
	}
	public String toString() {
		return this.state + "_" + this.parents;
	}
	public static void main(String[] args) {
		Node nodeS = new Node("S");
		Node nodeA = new Node("A");
		Node nodeB = new Node("B");
		Node nodeC = new Node("C");
		Node nodeD = new Node("D");
		Node nodeE = new Node("E");
		Node nodeF = new Node("F");
		Node nodeG = new Node("G");
		Node nodeH = new Node("H");
		Node node = new Node();
		System.out.println(node.execute(nodeS, "G"));
	}

}
