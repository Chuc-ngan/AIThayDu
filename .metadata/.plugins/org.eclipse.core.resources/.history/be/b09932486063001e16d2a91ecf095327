package Lab2;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

public class BreadthFirstSearchAlgo implements ISearchAlgo {

	@Override
	public Node execute(Node root, String goal) {
//		if(root.getLabel().equals(goal)) {
//			NodeUtils.printPath(root);
//			return root;
//		}
		Queue<Node> frontier = new LinkedList<Node>();
		frontier.add(root);
		List<Node> expanded = new ArrayList<>();
//		Set<Node> explored = new HashSet<Node>();
		while (!frontier.isEmpty()) {
			Node node = frontier.poll();
			if (node.getLabel().equals(goal)) {
				return node;
			} else
				expanded.add(node);
			for (Node child : node.getChildrenNodes()) {
				if (!expanded.contains(child) && !frontier.contains(child)) {
					frontier.add(child);
					child.setParent(node);
				}
			}
		}
		return null;
	}

	@Override
	public Node execute(Node root, String start, String goal) {
		Queue<Node> frontier = new LinkedList<Node>();
		frontier.add(root);
		List<Node> expanded = new ArrayList<>();
		while (!frontier.isEmpty()) {
			Node node = frontier.poll();
			if (node.getLabel().equals(start)) {
				frontier.clear();
				expanded.clear();
				node.setParent(null);
			}
		}

		return null;
	}

}
